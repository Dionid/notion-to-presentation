// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/Dionid/notion-to-presentation/libs/ntp/models"
)

func AppIndexPage(presentations []*models.Presentation) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div><div class=\"flex gap-6 items-center\"><h1 class=\"text-3xl font-bold\">Presentations</h1><script>\n                    window.addEventListener(\"load\", function () {\n                        const { createApp } = Vue;\n\n                        createApp({\n                            data() {\n                                return {\n                                    notionUrl: \"\",\n                                    loading: false\n                                }\n                            },\n                            methods: {\n                                async parseAndCreateNewPresentation() {\n                                    if (!this.notionUrl) {\n                                        alert(\"Notion url is required\");\n                                        return;\n                                    }\n\n                                    this.loading = true;\n\n                                    const response = await fetch(\"/app/presentation/new\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify({\n                                            notionUrl: this.notionUrl\n                                        })\n                                    });\n\n                                    this.loading = false;\n\n                                    const json = await response.json();\n\n                                    if (response.ok) {\n                                        window.location.href = \"/app/presentation/\" + json.id;\n                                    } else {\n                                        alert(\"Failed to create new presentation: \" + json.message);\n                                    }\n                                }\n                            },\n                        }).mount(\"#new-presentation-component\")\n                    });\n                </script><div id=\"new-presentation-component\" class=\"join relative overflow-hidden\"><input type=\"text\" class=\"input input-bordered join-item bg-white\" placeholder=\"Notion url\" v-model=\"notionUrl\"> <button class=\"btn btn-primary join-item\" @click=\"parseAndCreateNewPresentation\">+ New</button><div v-if=\"loading\" class=\"absolute top-0 left-0 flex w-full h-full items-center justify-center bg-black bg-opacity-30 text-white text-2xl z-10\"><span class=\"loading loading-spinner loading-lg text-primary\"></span></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.JSONScript("presentations-data", presentations).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n                window.addEventListener(\"load\", function () {\n                    const { createApp } = Vue;\n\n                    const presentationsData = JSON.parse(\n                        document.getElementById(\"presentations-data\").textContent\n                    );\n\n                    if (!presentationsData) {\n                        alert(\"No data found\");\n                        return;\n                    }\n\n                    createApp({\n                        data() {\n                            return {\n                                presentations: presentationsData.reduce((acc, presentation) => {\n                                    acc[presentation.id] = presentation;\n                                    return acc;\n                                }, {})\n                            }\n                        },\n                        methods: {\n                            async deletePresentation(id) {\n                                const confiremed = confirm(`Are you sure you want to delete presentation ${this.presentations[id].title}?`);\n                                if (!confiremed) {\n                                    return;\n                                }\n\n                                const response = await fetch(\"/api/collections/presentation/records/\" + id, {\n                                    method: \"DELETE\",\n                                    headers: {\n                                        \"Content-Type\": \"application/json\"\n                                    }\n                                });\n\n                                delete this.presentations[id];\n\n                                if (response.ok) {\n                                   return;\n                                } else {\n                                    alert(\"Failed to delete new presentation: \" + json.message);\n                                }\n                            }\n                        },\n                    }).mount(\"#presentations-list-component\")\n                });\n            </script><div id=\"presentations-list-component\" class=\"py-6 grid gap-3 grid-cols-3\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if len(presentations) == 0 {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"text-center text-gray-500 dark:text-gray-400\">There is no presentations... yet...</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			for _, presentation := range presentations {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"card bg-white shadow\" v-if=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(`presentations['` + presentation.Id + `']`)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.templ`, Line: 120, Col: 101}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div class=\"card-body\"><a class=\"card-title\" href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 templ.SafeURL = templ.SafeURL("/app/presentation/" + presentation.Id)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var4)))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(presentation.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.templ`, Line: 122, Col: 133}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a><p class=\"font-normal text-gray-700 dark:text-gray-400\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(presentation.Description)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.templ`, Line: 124, Col: 58}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p><div class=\"card-actions\"><a class=\"btn btn-ghost\" href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 templ.SafeURL = templ.SafeURL("/app/presentation/" + presentation.Id)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var7)))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Edit</a> <button class=\"btn btn-ghost\">Share</button> <button class=\"btn btn-ghost\" @click=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs("deletePresentation('" + presentation.Id + "')")
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.templ`, Line: 133, Col: 118}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Delete</button></div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = AppLayout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
