// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Dionid/notion-to-presentation/libs/ntp/models"

func MyProfilePage(user *models.User) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"w-full flex-col\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.JSONScript("user-data", user).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h1 class=\"text-3xl font-bold\">My profile</h1><div class=\"grid grid-cols-3 gap-4 py-6\"><script>\n                    window.addEventListener(\"load\", function () {\n                        const { createApp } = Vue\n\n                        const userData = JSON.parse(\n                            document.getElementById(\"user-data\").textContent\n                        );\n\n                        if (!userData) {\n                            alert(\"No data found\");\n                            return;\n                        }\n\n                        createApp({\n                            data() {\n                                return {\n                                    error: \"\",\n                                    name: userData.name,\n                                    description: userData.description,\n                                }\n                            },\n                            watch: {\n                                name() {\n                                    this.error = \"\";\n                                },\n                                description() {\n                                    this.error = \"\";\n                                },\n                            },\n                            methods: {\n                                async save() {\n                                    const data = {\n                                        name: this.name,\n                                        description: this.description,\n                                    };\n\n                                    const response = await fetch(\"/api/collections/users/records/\" + userData.id, {\n                                        method: \"PATCH\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify(data),\n                                    });\n\n                                    const respJson = await response.json();\n\n                                    if (response.ok) {\n                                        alert(\"Saved\")\n                                    } else {\n                                        this.error = respJson.message;\n                                    }\n                                }\n                            },\n                        }).mount(\"#user-info-component\")\n                    })\n                </script><div id=\"user-info-component\" class=\"card bg-white shadow\"><div class=\"card-body\"><div class=\"w-full text-xl mb-4\">Info</div><form class=\"flex flex-col gap-4\"><div class=\"flex items-center\"><span class=\"shrink-0\" style=\"width:100px;\">Name:</span> <input class=\"input input-bordered w-full\" type=\"text\" v-model=\"name\"></div><div class=\"flex\"><span style=\"width:100px;\" class=\"shrink-0\">Description:</span> <textarea class=\"textarea textarea-bordered w-full\" v-model=\"description\"></textarea></div><div v-if=\"error\" role=\"alert\" class=\"alert alert-error mt-5\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw("{{ error }}").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><button class=\"btn btn-primary\" type=\"button\" @click=\"save\">Save</button></form></div></div><script>\n                    window.addEventListener(\"load\", function () {\n                        const { createApp } = Vue\n\n                        createApp({\n                            data() {\n                                return {\n                                    error: \"\",\n                                    newEmail: \"\",\n                                    loading: false,\n                                }\n                            },\n                            watch: {\n                                newEmail() {\n                                    this.error = \"\";\n                                },\n                            },\n                            methods: {\n                                async save() {\n                                    const data = {\n                                        newEmail: this.newEmail,\n                                    };\n\n                                    this.loading = true;\n\n                                    const response = await fetch(\"/api/collections/users/request-email-change\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify(data),\n                                    });\n\n                                    this.loading = false;\n\n                                    console.log(\"response\", response)\n\n                                    if (response.ok) {\n                                        alert(\"Requested! Check your email for confirmation link.\")\n                                        this.requestedEmail = this.newEmail\n                                        this.newEmail = \"\";\n                                    } else {\n                                        this.error = respJson.message;\n                                    }\n                                }\n                            },\n                        }).mount(\"#user-email-component\")\n                    })\n                </script><div id=\"user-email-component\" class=\"card bg-white shadow relative overflow-hidden\"><div class=\"card-body\"><div class=\"w-full text-xl mb-4\">Email</div><form class=\"flex flex-col gap-4\"><div class=\"flex items-center\"><span class=\"inline-block\" style=\"width: 115px\">Email:</span> <span class=\"inline-block\" style=\"width: 115px\" v-if=\"requestedEmail\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw("{{ requestedEmail }} (requested)").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span> <span class=\"inline-block\" style=\"width: 115px\" v-if=\"!requestedEmail\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(user.Email)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `my_profile.templ`, Line: 147, Col: 115}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><label class=\"flex items-center\"><span class=\"shrink-0 inline-block\" style=\"width: 115px\">New email:</span> <input class=\"input input-bordered w-full\" type=\"text\" v-model=\"newEmail\"></label><div v-if=\"error\" role=\"alert\" class=\"alert alert-error mt-5\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw("{{ error }}").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><button class=\"btn btn-primary\" :disabled=\"newEmail === &#39;&#39;\" type=\"button\" @click=\"save\">Request email change</button></form></div><div v-if=\"loading\" class=\"absolute top-0 left-0 flex w-full h-full items-center justify-center bg-black bg-opacity-30 text-white text-2xl z-10\"><span class=\"loading loading-spinner loading-lg text-primary\"></span></div></div><script>\n                    window.addEventListener(\"load\", function () {\n                        const { createApp } = Vue\n\n                        const userData = JSON.parse(\n                            document.getElementById(\"user-data\").textContent\n                        );\n\n                        if (!userData) {\n                            alert(\"No data found\");\n                            return;\n                        }\n\n                        createApp({\n                            data() {\n                                return {\n                                    error: \"\",\n                                    oldPassword: \"\",\n                                    newPassword: \"\",\n                                    newPasswordRepeat: \"\",\n                                }\n                            },\n                            watch: {\n                                oldPassword() {\n                                    this.error = \"\";\n                                },\n                                newPassword() {\n                                    this.error = \"\";\n                                },\n                                newPasswordRepeat() {\n                                    this.error = \"\";\n                                },\n                            },\n                            computed: {\n                                valid() {\n                                    return this.oldPassword !== \"\" && this.newPassword !== \"\" && this.newPasswordRepeat !== \"\" && this.newPassword === this.newPasswordRepeat;\n                                }\n                            },\n                            methods: {\n                                async save() {\n                                    if (!this.oldPassword || !this.newPassword || !this.newPasswordRepeat) {\n                                        this.error = \"All fields are required\";\n                                        return;\n                                    }\n\n                                    if (this.newPassword.length < 8 || this.newPasswordRepeat.length < 8) {\n                                        this.error = \"Password must be at least 8 characters long\";\n                                        return;\n                                    }\n\n                                    if (this.newPassword !== this.newPasswordRepeat) {\n                                        this.error = \"Passwords do not match\";\n                                        return;\n                                    }\n\n                                    const data = {\n                                        password: this.newPassword,\n                                        passwordConfirm: this.newPasswordRepeat,\n                                        oldPassword: this.oldPassword,\n                                    };\n\n                                    const response = await fetch(\"/api/collections/users/records/\" + userData.id, {\n                                        method: \"PATCH\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify(data),\n                                    });\n\n                                    if (!response.ok) {\n                                        const respJson = await response.json();\n                                        this.error = respJson.message;\n                                        return;\n                                    }\n\n                                    cookieStore.delete(\"pb_auth\")\n\n                                    const newCookieResponse = await fetch(\"/auth/sign-in\", {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json\"\n                                        },\n                                        body: JSON.stringify({\n                                            email: userData.email,\n                                            password: this.newPassword,\n                                        }),\n                                    });\n\n                                    if (!newCookieResponse.ok) {\n                                        const respJson = await newCookieResponse.json();\n                                        this.error = respJson.message;\n                                        return;\n                                    }\n\n                                    alert(\"Password changed\")\n                                }\n                            },\n                        }).mount(\"#user-password-component\")\n                    })\n                </script><div id=\"user-password-component\" class=\"card bg-white shadow\"><div class=\"card-body\"><div class=\"w-full text-xl mb-4\">Password</div><form class=\"flex flex-col gap-4\"><label class=\"flex items-center\"><span class=\"inline-block\" style=\"width: 120px\">Old password:</span> <input class=\"input input-bordered\" type=\"password\" v-model=\"oldPassword\"></label> <label class=\"flex items-center\"><span class=\"inline-block\" style=\"width: 120px\">New password:</span> <input class=\"input input-bordered\" type=\"password\" v-model=\"newPassword\"></label> <label class=\"flex items-center\"><span class=\" inline-block\" style=\"width: 120px\">Repeat:</span> <input class=\"input input-bordered\" type=\"password\" v-model=\"newPasswordRepeat\"></label><div v-if=\"error\" role=\"alert\" class=\"alert alert-error mt-5\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw("{{ error }}").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><button class=\"btn btn-primary\" type=\"button\" :disabled=\"valid === false\" @click=\"save\">Change password</button></form></div></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = AppLayout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
